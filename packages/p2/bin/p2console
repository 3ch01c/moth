#! /bin/sh

BASE=$CTF_BASE/state/teams

esc () {
    printf '%s' "$*" | sed 's/[^-0-9A-Za-z ]/_/g; s/ /+/g'
}

newteam () {
    echo '== Team Creation =='
    echo
    echo -n 'What would you like your team to be called (3-12 chars)? '
    read -r name
    echo
    namelen=$(printf "%s" "$name" | wc -c)
    if [ $namelen -lt 3 ] || [ $namelen -gt 12 ]; then
        echo 'Invalid name length'
        return
    fi
    hash=$(printf '%s %s' "$salt" "$name" | md5sum | cut -b 1-8)

    if [ -f $BASE/names/$hash ]; then
        echo "That name is already in use.  Try another one."
        return
    fi

    printf '%s' "$name" > $BASE/names/$hash

    cat <<EOD
Your team hash is [1m$hash[0m.  Write that down somewhere and don't lose it.
If you forget your hash, you'll have to start over from the beginning
with a new team and everybody will laugh at you.
EOD
}

fini () {
    echo
    echo "Press [Enter] to clear the screen."
    read
    exit 0
}

log () {
    awk -v H=$1 '($2 == H) { print($3, $4); }' $CTF_BASE/points.log
}


clear
read salt < $BASE/salt

printf '\017Team hash ("new" to create a new team): '
read -r hash
echo
if [ -z "$hash" ]; then
    exit 0
elif [ "$hash" = "new" ]; then
    newteam
    fini
elif [ "$hash" = 58 ]; then
    name='Thumper Bumper'
elif ! [ -f $BASE/names/$hash ]; then
    echo "No such team, fool."
    echo "Is this when everybody laughs at you for forgetting your hash?"
    fini
else
    read -r name < $BASE/names/$hash
fi

clear


printf 'Welcome back, [1m%s[0m.\n' "$name"

while true; do
    printf "[7mp2>[0m "
    read -r answer

    case "$answer" in
        \?|help)
            cat <<EOD
[1m                         Help
----------------------------------------------------------[0m

Type [1mquit[0m to leave the p2 shell.
Type [1mlog[0m to show answered puzzles.

Any other string is checked as an answer.  If the answer
is correct, you are awarded points and the scoreboard will
update within 10 seconds.  Check the puzzles overview to
see if your answer unlocked a new puzzle.
EOD
            continue
            ;;
        log)
            cat <<EOD
[1mPuzzles Answered By $name
---------------------------------------[0m
EOD
            log $hash
            continue
            ;;
        quit)
            break
            ;;
    esac

    match=$(awk -v ans="$answer" '(substr($0, length($1)+2) == ans) { print substr(FILENAME, 6, length(FILENAME)-17) " " $1; }' $CTF_BASE/packages/*/answers.txt)
    if [ -z "$match" ]; then
        echo 'That is not a correct answer.  Type "[1mhelp[0m" for help.'
        continue
    fi
    
    cat=${match% *}
    points=${match#* }
    fn=$BASE/$hash/$cat.$points
    if log $hash | grep -Fxq "$cat $points"; then
        echo "You've already received points for this answer."
    elif $CTF_BASE/packages/p2/bin/pointscli $hash $cat $points p2console; then
        echo "You get [1m$points[0m more points in the [1m$cat[0m category."
    else
        echo "[1mError recording points.  Tell the officials![0m"
    fi
done

