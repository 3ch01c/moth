#! /bin/awk -f

##
##
## I'm not super happy with how this code looks.  Rest assured, though,
## the C version would look far, far worse.
##
##

function qsort(A, left, right,   i, last) {
    if (left >= right)
        return
    swap(A, left, left+int((right-left+1)*rand()))
    last = left
    for (i = left+1; i <= right; i++)
        if (A[i] < A[left])
            swap(A, ++last, i)
    swap(A, left, last)
    qsort(A, left, last-1)
    qsort(A, last+1, right)
}
function swap(A, i, j,   t) {
    t = A[i]; A[i] = A[j]; A[j] = t
}

function escape(s) {
    gsub("&", "&amp;", s)
    gsub("<", "&lt;", s)
    gsub(">", "&gt;", s)
    return s
}

function head() {
    print "<!DOCTYPE html>"
    print "<html><head><title>Project 2 Scoreboard</title>"
    print "<meta http-equiv=\"refresh\" content=\"60\">"
    print "<style>"
    print "html {background: black url(\"p2inv.png\") no-repeat top center; background-size: contain; min-height: 100%; color: white;}"
    print "body {background: black; opacity: 0.8; margin: 0;}"
    print "p {margin: 0;}"
    print "span {display: inline-block; margin: 0; border: 0;}"
    print ".cat0 {background-color: #842;}"
    print ".cat1 {background-color: #028;}"
    print ".cat2 {background-color: #802;}"
    print ".cat3 {background-color: #640;}"
    print ".cat4 {background-color: #486;}"
    print ".cat5 {background-color: #682;}"
    print ".cat6 {background-color: #408;}"
    print ".cat7 {background-color: #624;}"
    print ".name {position: absolute; right: 10px;}"
    print "#scores p {margin: 0; padding: 0; border: none; border-top: thin solid #222; clear: both;}"
    print "#scores p:hover {background-color: #222;}"
    print "</style>"
    print "</head><body>"
    print "<div id=\"scores\">"
}

function foot() {
    print "</div></body></html>"
}

BEGIN {
    base = ENVIRON["CTF_BASE"]
    if (! base) {
        base = "/var/lib/ctf"
    }

    head()
}

# MAINLOOP
{
    time = $1
    hash = $2
    cat = $3
    points = int($4)

    # Build a list of team names
    if (! (hash in team_names)) {
        fn = sprintf("%s/teams/names/%s", base, hash)
        getline team_names[hash] < fn
        close(fn)
    }

    # Total points possible so far in this category
    if (! ((cat, points) in cat_pointval)) {
        cat_total[cat] += points
        cat_pointval[cat, points] = 1
    }

    # Enumerate categories
    if (! (cat in seen_cats)) {
        seen_cats[cat] = 1
        categories[ncats++] = cat
    }

    # Points this team has in this category
    cat_points[hash, cat] += points
}

END {
    # Adjust per-category points to a per-category percentage complete
    for (hash in team_names) {
        for (cat in cat_total) {
            cat_score[hash, cat] = cat_points[hash, cat] / cat_total[cat]
            total_score[hash] += cat_score[hash, cat]
        }
        scores[nteams++] = total_score[hash]
        if (total_score[hash] > max_score) {
            max_score = total_score[hash]
        }
    }

    # Sort scores
    qsort(scores, 0, nteams-1)

    for (i = nteams-1; i >= 0; i -= 1) {
        score = scores[i];
        if (score == scores[i-1]) continue;         # Skip duplicates

        for (hash in team_names) {
            if (total_score[hash] != score) {
                continue;
            }

            name = escape(team_names[hash])
            printf("<span class=\"name\">%s</span>\n", name)

            for (ncat = 0; ncat < ncats; ncat += 1) {
                cat = categories[ncat];
                points = cat_points[hash, cat];

                if (cat_points[hash, cat] > 0) {
                    width = cat_score[hash, cat] / max_score * 80 
                    printf("<!-- %s %s %s -->", cat, points, name)
                    printf("  <span class=\"cat%d\" style=\"width: %.2f%%;\">%d</span>\n", 
                            ncat, width, cat_points[hash, cat])
                }
            }
        }
    }

    foot()
}

